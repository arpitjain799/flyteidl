// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/data.proto

#include "flyteidl/admin/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlyteArtifact_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fnode_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DynamicWorkflowNodeMetadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
namespace flyteidl {
namespace admin {
class FlyteArtifactGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlyteArtifactGetRequest> _instance;
} _FlyteArtifactGetRequest_default_instance_;
class DataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataResponse> _instance;
  const ::flyteidl::core::LiteralMap* literal_map_;
  ::google::protobuf::internal::ArenaStringPtr flyte_deck_;
  const ::flyteidl::admin::DynamicWorkflowNodeMetadata* dynamic_workflow_;
} _DataResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsFlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FlyteArtifactGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::FlyteArtifactGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FlyteArtifactGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto}, {
      &scc_info_FlyteArtifact_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsDataResponse_flyteidl_2fadmin_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_DataResponse_default_instance_;
    new (ptr) ::flyteidl::admin::DataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::DataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DataResponse_flyteidl_2fadmin_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDataResponse_flyteidl_2fadmin_2fdata_2eproto}, {
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_DynamicWorkflowNodeMetadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataResponse_flyteidl_2fadmin_2fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fdata_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FlyteArtifactGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FlyteArtifactGetRequest, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DataResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::DataResponseDefaultTypeInternal, literal_map_),
  offsetof(::flyteidl::admin::DataResponseDefaultTypeInternal, flyte_deck_),
  offsetof(::flyteidl::admin::DataResponseDefaultTypeInternal, dynamic_workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DataResponse, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::FlyteArtifactGetRequest)},
  { 6, -1, sizeof(::flyteidl::admin::DataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FlyteArtifactGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_DataResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fdata_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fdata_2eproto, "flyteidl/admin/data.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fdata_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fdata_2eproto, 2, file_level_enum_descriptors_flyteidl_2fadmin_2fdata_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fdata_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fdata_2eproto[] =
  "\n\031flyteidl/admin/data.proto\022\016flyteidl.ad"
  "min\032\033flyteidl/admin/common.proto\032\034flytei"
  "dl/core/literals.proto\032#flyteidl/admin/n"
  "ode_execution.proto\"J\n\027FlyteArtifactGetR"
  "equest\022/\n\010artifact\030\001 \001(\0132\035.flyteidl.admi"
  "n.FlyteArtifact\"\247\001\n\014DataResponse\0220\n\013lite"
  "ral_map\030\001 \001(\0132\031.flyteidl.core.LiteralMap"
  "H\000\022\024\n\nflyte_deck\030\002 \001(\014H\000\022G\n\020dynamic_work"
  "flow\030\003 \001(\0132+.flyteidl.admin.DynamicWorkf"
  "lowNodeMetadataH\000B\006\n\004dataB7Z5github.com/"
  "flyteorg/flyteidl/gen/pb-go/flyteidl/adm"
  "inb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fdata_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fdata_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fdata_2eproto,
  "flyteidl/admin/data.proto", &assign_descriptors_table_flyteidl_2fadmin_2fdata_2eproto, 450,
};

void AddDescriptors_flyteidl_2fadmin_2fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fdata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fdata_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fdata_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void FlyteArtifactGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_FlyteArtifactGetRequest_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::flyteidl::admin::FlyteArtifact*>(
      ::flyteidl::admin::FlyteArtifact::internal_default_instance());
}
class FlyteArtifactGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::FlyteArtifact& artifact(const FlyteArtifactGetRequest* msg);
};

const ::flyteidl::admin::FlyteArtifact&
FlyteArtifactGetRequest::HasBitSetters::artifact(const FlyteArtifactGetRequest* msg) {
  return *msg->artifact_;
}
void FlyteArtifactGetRequest::clear_artifact() {
  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlyteArtifactGetRequest::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlyteArtifactGetRequest::FlyteArtifactGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FlyteArtifactGetRequest)
}
FlyteArtifactGetRequest::FlyteArtifactGetRequest(const FlyteArtifactGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::flyteidl::admin::FlyteArtifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FlyteArtifactGetRequest)
}

void FlyteArtifactGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto.base);
  artifact_ = nullptr;
}

FlyteArtifactGetRequest::~FlyteArtifactGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FlyteArtifactGetRequest)
  SharedDtor();
}

void FlyteArtifactGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void FlyteArtifactGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlyteArtifactGetRequest& FlyteArtifactGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlyteArtifactGetRequest_flyteidl_2fadmin_2fdata_2eproto.base);
  return *internal_default_instance();
}


void FlyteArtifactGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FlyteArtifactGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlyteArtifactGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlyteArtifactGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.FlyteArtifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::FlyteArtifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlyteArtifactGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FlyteArtifactGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.FlyteArtifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FlyteArtifactGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FlyteArtifactGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlyteArtifactGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FlyteArtifactGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.FlyteArtifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FlyteArtifactGetRequest)
}

::google::protobuf::uint8* FlyteArtifactGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FlyteArtifactGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.FlyteArtifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FlyteArtifactGetRequest)
  return target;
}

size_t FlyteArtifactGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FlyteArtifactGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.FlyteArtifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlyteArtifactGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FlyteArtifactGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlyteArtifactGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlyteArtifactGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FlyteArtifactGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FlyteArtifactGetRequest)
    MergeFrom(*source);
  }
}

void FlyteArtifactGetRequest::MergeFrom(const FlyteArtifactGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FlyteArtifactGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::flyteidl::admin::FlyteArtifact::MergeFrom(from.artifact());
  }
}

void FlyteArtifactGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FlyteArtifactGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyteArtifactGetRequest::CopyFrom(const FlyteArtifactGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FlyteArtifactGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyteArtifactGetRequest::IsInitialized() const {
  return true;
}

void FlyteArtifactGetRequest::Swap(FlyteArtifactGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlyteArtifactGetRequest::InternalSwap(FlyteArtifactGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata FlyteArtifactGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fdata_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DataResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_DataResponse_default_instance_.literal_map_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_DataResponse_default_instance_.flyte_deck_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_DataResponse_default_instance_.dynamic_workflow_ = const_cast< ::flyteidl::admin::DynamicWorkflowNodeMetadata*>(
      ::flyteidl::admin::DynamicWorkflowNodeMetadata::internal_default_instance());
}
class DataResponse::HasBitSetters {
 public:
  static const ::flyteidl::core::LiteralMap& literal_map(const DataResponse* msg);
  static const ::flyteidl::admin::DynamicWorkflowNodeMetadata& dynamic_workflow(const DataResponse* msg);
};

const ::flyteidl::core::LiteralMap&
DataResponse::HasBitSetters::literal_map(const DataResponse* msg) {
  return *msg->data_.literal_map_;
}
const ::flyteidl::admin::DynamicWorkflowNodeMetadata&
DataResponse::HasBitSetters::dynamic_workflow(const DataResponse* msg) {
  return *msg->data_.dynamic_workflow_;
}
void DataResponse::set_allocated_literal_map(::flyteidl::core::LiteralMap* literal_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (literal_map) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      literal_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, literal_map, submessage_arena);
    }
    set_has_literal_map();
    data_.literal_map_ = literal_map;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DataResponse.literal_map)
}
void DataResponse::clear_literal_map() {
  if (has_literal_map()) {
    delete data_.literal_map_;
    clear_has_data();
  }
}
void DataResponse::set_allocated_dynamic_workflow(::flyteidl::admin::DynamicWorkflowNodeMetadata* dynamic_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (dynamic_workflow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dynamic_workflow, submessage_arena);
    }
    set_has_dynamic_workflow();
    data_.dynamic_workflow_ = dynamic_workflow;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DataResponse.dynamic_workflow)
}
void DataResponse::clear_dynamic_workflow() {
  if (has_dynamic_workflow()) {
    delete data_.dynamic_workflow_;
    clear_has_data();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataResponse::kLiteralMapFieldNumber;
const int DataResponse::kFlyteDeckFieldNumber;
const int DataResponse::kDynamicWorkflowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataResponse::DataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.DataResponse)
}
DataResponse::DataResponse(const DataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kLiteralMap: {
      mutable_literal_map()->::flyteidl::core::LiteralMap::MergeFrom(from.literal_map());
      break;
    }
    case kFlyteDeck: {
      set_flyte_deck(from.flyte_deck());
      break;
    }
    case kDynamicWorkflow: {
      mutable_dynamic_workflow()->::flyteidl::admin::DynamicWorkflowNodeMetadata::MergeFrom(from.dynamic_workflow());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.DataResponse)
}

void DataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DataResponse_flyteidl_2fadmin_2fdata_2eproto.base);
  clear_has_data();
}

DataResponse::~DataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.DataResponse)
  SharedDtor();
}

void DataResponse::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void DataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataResponse& DataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataResponse_flyteidl_2fadmin_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DataResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.DataResponse)
  switch (data_case()) {
    case kLiteralMap: {
      delete data_.literal_map_;
      break;
    }
    case kFlyteDeck: {
      data_.flyte_deck_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDynamicWorkflow: {
      delete data_.dynamic_workflow_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.DataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.LiteralMap literal_map = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_literal_map();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes flyte_deck = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_flyte_deck();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DynamicWorkflowNodeMetadata::_InternalParse;
        object = msg->mutable_dynamic_workflow();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.DataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.LiteralMap literal_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_literal_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes flyte_deck = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flyte_deck()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_workflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.DataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.DataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.DataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LiteralMap literal_map = 1;
  if (has_literal_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::literal_map(this), output);
  }

  // bytes flyte_deck = 2;
  if (has_flyte_deck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->flyte_deck(), output);
  }

  // .flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 3;
  if (has_dynamic_workflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::dynamic_workflow(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.DataResponse)
}

::google::protobuf::uint8* DataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.DataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LiteralMap literal_map = 1;
  if (has_literal_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::literal_map(this), target);
  }

  // bytes flyte_deck = 2;
  if (has_flyte_deck()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->flyte_deck(), target);
  }

  // .flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 3;
  if (has_dynamic_workflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::dynamic_workflow(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.DataResponse)
  return target;
}

size_t DataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.DataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .flyteidl.core.LiteralMap literal_map = 1;
    case kLiteralMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.literal_map_);
      break;
    }
    // bytes flyte_deck = 2;
    case kFlyteDeck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flyte_deck());
      break;
    }
    // .flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 3;
    case kDynamicWorkflow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.dynamic_workflow_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.DataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.DataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.DataResponse)
    MergeFrom(*source);
  }
}

void DataResponse::MergeFrom(const DataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.DataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kLiteralMap: {
      mutable_literal_map()->::flyteidl::core::LiteralMap::MergeFrom(from.literal_map());
      break;
    }
    case kFlyteDeck: {
      set_flyte_deck(from.flyte_deck());
      break;
    }
    case kDynamicWorkflow: {
      mutable_dynamic_workflow()->::flyteidl::admin::DynamicWorkflowNodeMetadata::MergeFrom(from.dynamic_workflow());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void DataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.DataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResponse::CopyFrom(const DataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.DataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResponse::IsInitialized() const {
  return true;
}

void DataResponse::Swap(DataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataResponse::InternalSwap(DataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fdata_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FlyteArtifactGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::FlyteArtifactGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FlyteArtifactGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::DataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::DataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::DataResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
