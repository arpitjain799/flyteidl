# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_literal_map import CoreLiteralMap  # noqa: F401,E501
from flyteadmin.models.flyteidladmin_dynamic_workflow_node_metadata import FlyteidladminDynamicWorkflowNodeMetadata  # noqa: F401,E501


class AdminDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'literal_map': 'CoreLiteralMap',
        'flyte_deck': 'str',
        'dynamic_workflow': 'FlyteidladminDynamicWorkflowNodeMetadata'
    }

    attribute_map = {
        'literal_map': 'literal_map',
        'flyte_deck': 'flyte_deck',
        'dynamic_workflow': 'dynamic_workflow'
    }

    def __init__(self, literal_map=None, flyte_deck=None, dynamic_workflow=None):  # noqa: E501
        """AdminDataResponse - a model defined in Swagger"""  # noqa: E501

        self._literal_map = None
        self._flyte_deck = None
        self._dynamic_workflow = None
        self.discriminator = None

        if literal_map is not None:
            self.literal_map = literal_map
        if flyte_deck is not None:
            self.flyte_deck = flyte_deck
        if dynamic_workflow is not None:
            self.dynamic_workflow = dynamic_workflow

    @property
    def literal_map(self):
        """Gets the literal_map of this AdminDataResponse.  # noqa: E501


        :return: The literal_map of this AdminDataResponse.  # noqa: E501
        :rtype: CoreLiteralMap
        """
        return self._literal_map

    @literal_map.setter
    def literal_map(self, literal_map):
        """Sets the literal_map of this AdminDataResponse.


        :param literal_map: The literal_map of this AdminDataResponse.  # noqa: E501
        :type: CoreLiteralMap
        """

        self._literal_map = literal_map

    @property
    def flyte_deck(self):
        """Gets the flyte_deck of this AdminDataResponse.  # noqa: E501


        :return: The flyte_deck of this AdminDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._flyte_deck

    @flyte_deck.setter
    def flyte_deck(self, flyte_deck):
        """Sets the flyte_deck of this AdminDataResponse.


        :param flyte_deck: The flyte_deck of this AdminDataResponse.  # noqa: E501
        :type: str
        """
        if flyte_deck is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', flyte_deck):  # noqa: E501
            raise ValueError(r"Invalid value for `flyte_deck`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._flyte_deck = flyte_deck

    @property
    def dynamic_workflow(self):
        """Gets the dynamic_workflow of this AdminDataResponse.  # noqa: E501

        Only applicable if the node/task produced a futures file.  # noqa: E501

        :return: The dynamic_workflow of this AdminDataResponse.  # noqa: E501
        :rtype: FlyteidladminDynamicWorkflowNodeMetadata
        """
        return self._dynamic_workflow

    @dynamic_workflow.setter
    def dynamic_workflow(self, dynamic_workflow):
        """Sets the dynamic_workflow of this AdminDataResponse.

        Only applicable if the node/task produced a futures file.  # noqa: E501

        :param dynamic_workflow: The dynamic_workflow of this AdminDataResponse.  # noqa: E501
        :type: FlyteidladminDynamicWorkflowNodeMetadata
        """

        self._dynamic_workflow = dynamic_workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
